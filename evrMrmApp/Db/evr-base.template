# Base record set for an EVR
#
# Macros-
#  SYS = System name
#  DEVICE = Event receiver / timing card name (same as mrmEvrSetupVME()) Eg. EVR0
#  EVNT1HZ = DB event number for the 1 second tick


record(bo, "$(SYS)-$(DEVICE):Ena-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(DEVICE), PROP=Enable")
  field(DESC, "Master enable for EVR device")
  field(MASK, "1")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field( VAL , "$(Ena-Sel\=0)")
  info(autosaveFields_pass0, "VAL")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-LinkTimo-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(DEVICE), PROP=HB Timeout Count")
  field(SCAN, "I/O Intr")
  field(DESC, "# of heartbeat timeout")
}

record(bo, "$(SYS)-$(DEVICE):ExtInhib-Sel") {
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(DEVICE), PROP=External Inhibit")
  field(PINI, "YES")
  field(DESC, "Use HW trigger inhibit (EVRTG only)")
  field(MASK, "1")
  field(ZNAM, "Use Inhibit")
  field(ONAM, "Always Permit")
  field(OSV, "MINOR")
  field( VAL , "$(ExtInhib-Sel\=0)")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS)-$(DEVICE):Link-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(DEVICE), PROP=Link Status")
  field(DESC, "Status of event link")
  field(SCAN, "1 second")
  field(ZNAM, "Fail")
  field(ONAM, "OK")
  field(ZSV , "MAJOR")
  field(FLNK, "$(SYS)-$(DEVICE):Cnt-RxErr-I")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-RxErr-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Receive Error Count")
  field(INP , "@OBJ=$(DEVICE), PROP=Receive Error Count")
  field(TSEL, "$(SYS)-$(DEVICE):Link-Sts.TIME")
  field(FLNK, "$(SYS)-$(DEVICE):Cnt-HwOflw-I")
}

record(calc, "$(SYS)-$(DEVICE):Cnt-RxErr-Rate-I") {
  field(DESC, "Counts errors in time interval")
  field(SCAN, "10 second")
  field(CALC, "A-B")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
  field(LOLO, "-1")
  field(LLSV, "MAJOR")
  field(INPA, "$(SYS)-$(DEVICE):Cnt-RxErr-I")
  field(INPB, "$(SYS)-$(DEVICE):Cnt-RxErr-Last_")
  field(FLNK, "$(SYS)-$(DEVICE):Cnt-RxErr-Last_")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-RxErr-Last_"){
  field(DESC, "RxErr count for last period")
  field(SCAN, "Passive")
  field(INP, "$(SYS)-$(DEVICE):Cnt-RxErr-I")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-HwOflw-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Hw Overflow Count")
  field(INP , "@OBJ=$(DEVICE), PROP=FIFO Overflow Count")
  field(TSEL, "$(SYS)-$(DEVICE):Cnt-RxErr-I.TIME")
  field(FLNK, "$(SYS)-$(DEVICE):Cnt-SwOflw-I")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-SwOflw-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Sw Overrate Count")
  field(INP , "@OBJ=$(DEVICE), PROP=FIFO Over rate")
  field(TSEL, "$(SYS)-$(DEVICE):Cnt-RxErr-I.TIME")
  field(FLNK, "$(SYS)-$(DEVICE):Link-Init-FO_")
}

# Detect the first time the event link
# is online.  Then set master enable.
record(calcout, "$(SYS)-$(DEVICE):Link-Init-FO_") {
  field(DESC, "Detect initial link up")
  field(INPA, "$(SYS)-$(DEVICE):Link-Sts")
  field(CALC, "A")
  field(OUT , "$(SYS)-$(DEVICE):Ena-Sel PP")
  field(OOPT, "Transition To Non-zero")
  field(ODLY, "4")
  field(TSEL, "$(SYS)-$(DEVICE):Link-Sts.TIME")
}

record(ao, "$(SYS)-$(DEVICE):Link-Clk-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(DEVICE), PROP=Clock")
  field(PINI, "YES")
  field(DESC, "Event Link speed")
  field(VAL , "$(Link-Clk-SP\=124.916)")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "45")
  field(DRVH, "150")
  field(DRVL, "45")
  field(PREC, "3")
  field(FLNK, "$(SYS)-$(DEVICE):Link-Clk-I")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}

record(ai, "$(SYS)-$(DEVICE):Link-Clk-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(DEVICE), PROP=Clock")
  field(DESC, "Event Link speed")
  field(PINI, "YES")
  field(UDF , "0")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(PREC, "3")
  field(FLNK, "$(SYS)-$(DEVICE):Link-ClkErr-I")
  info(autosaveFields_pass0, "EGU ESLO HOPR LOPR PREC")
}

record(calc, "$(SYS)-$(DEVICE):Link-ClkErr-I") {
  field(CALC, "(A-B)*1000")
  field(EGU , "KHz")
  field(PREC, "3")
  field(INPA, "$(SYS)-$(DEVICE):Link-Clk-SP")
  field(INPB, "$(SYS)-$(DEVICE):Link-Clk-I")
  field(TSEL, "$(SYS)-$(DEVICE):Link-Clk-I.TIME")
  field(FLNK, "$(SYS)-$(DEVICE):Link-ClkPeriod-I")
  info(autosaveFields_pass0, "EGU CALC PREC")
}

# Intended for use in calculations
record(calc, "$(SYS)-$(DEVICE):Link-ClkPeriod-I") {
  field(DESC, "Event period")
  field(CALC, "B/A")
  field(EGU , "s")
  field(PREC, "3")
  field(INPA, "$(SYS)-$(DEVICE):Link-Clk-SP")
  field(INPB, "$(SYS)-$(DEVICE):Link-Clk-SP.ESLO")
  field(TSEL, "$(SYS)-$(DEVICE):Link-Clk-I.TIME")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-IRQ-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "Interrupt Count")
  field(SCAN, "1 second")
  field(INP , "@OBJ=$(DEVICE), PROP=Interrupt Count")
  field(FLNK, "$(SYS)-$(DEVICE):Rate-IRQ-I")
}

record(calc, "$(SYS)-$(DEVICE):Rate-IRQ-I") {
  field(DESC, "Interrupt rate")
  field(INPA, "$(SYS)-$(DEVICE):Cnt-IRQ-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "Hz")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-FIFOEvt-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Event Count")
  field(SCAN, "1 second")
  field(INP , "@OBJ=$(DEVICE), PROP=FIFO Event Count")
  field(FLNK, "$(SYS)-$(DEVICE):Rate-FIFOEvt-I")
}

record(calc, "$(SYS)-$(DEVICE):Rate-FIFOEvt-I") {
  field(DESC, "FIFO reception rate")
  field(INPA, "$(SYS)-$(DEVICE):Cnt-FIFOEvt-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "evt/s")
  field(FLNK, "$(SYS)-$(DEVICE):Cnt-FIFOLoop-I")
}

record(longin, "$(SYS)-$(DEVICE):Cnt-FIFOLoop-I") {
  field(DTYP, "Obj Prop uint32")
  field(DESC, "FIFO Loop Count")
  field(INP , "@OBJ=$(DEVICE), PROP=FIFO Loop Count")
  field(FLNK, "$(SYS)-$(DEVICE):Rate-FIFOLoop-I")
}

record(calc, "$(SYS)-$(DEVICE):Rate-FIFOLoop-I") {
  field(DESC, "FIFO service rate")
  field(INPA, "$(SYS)-$(DEVICE):Cnt-FIFOLoop-I")
  field(CALC, "C:=A-B;B:=A;C")
  field(EGU , "Hz")
  field(FLNK, "$(SYS)-$(DEVICE):FIFOCap-I")
}

# average number of events taken from the FIFO during each loop
record(calc, "$(SYS)-$(DEVICE):FIFOCap-I") {
  field(DESC, "FIFO capacity utilization")
  field(INPA, "$(SYS)-$(DEVICE):Rate-FIFOEvt-I")
  field(INPB, "$(SYS)-$(DEVICE):Rate-FIFOLoop-I")
  field(INPC, "5.11")
  field(CALC, "A/B/C")
  field(EGU , "%")
  field(HIHI, "98")
  field(HIGH, "80")
  field(LOW , "-1")
  field(HHSV, "MAJOR")
  field(HSV , "MINOR")
  field(LSV , "INVALID")
  info(autosaveFields_pass0, "HIHI HIGH LOW")
}

record(bi, "$(SYS)-$(DEVICE):CG-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(DEVICE), PROP=CG Lock Status")
  field(SCAN, "1 second")
  field(PINI, "YES")
  field(DESC, "Fractional synthesizer locked")
  field(ZNAM, "Error")
  field(ONAM, "OK")
  field(ZSV , "MAJOR")
}

record(bi, "$(SYS)-$(DEVICE):Pll-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(DEVICE), PROP=PLL Lock Status")
  field(SCAN, "1 second")
  field(PINI, "YES")
  field(DESC, "Status of PLL")
  field(ZNAM, "Unlock")
  field(ONAM, "Lock")
  field(ZSV , "MAJOR")
}

record(mbbo, "$(SYS)-$(DEVICE):PLL-Bandwidth-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(DEVICE), PROP=PLL Bandwidth")
  field( PINI, "YES")
  field( VAL,  "$(PLL-Bandwidth-Sel\=4)")
  field( ZRST, "HM")
  field( ONST, "HL")
  field( TWST, "MH")
  field( THST, "MM")
  field( FRST, "ML")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( FLNK, "$(SYS)-$(DEVICE):PLL-Bandwidth-RB")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS)-$(DEVICE):PLL-Bandwidth-RB") {
  field( DTYP, "Obj Prop uint16")
  field( INP , "@OBJ=$(DEVICE), PROP=PLL Bandwidth")
  field( ZRST, "HM")
  field( ONST, "HL")
  field( TWST, "MH")
  field( THST, "MM")
  field( FRST, "ML")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRVL, "4")
}

record(mbbo, "$(SYS)-$(DEVICE):EvtClkMode-Sel") {
  field( DTYP, "Obj Prop uint16")
  field( OUT , "@OBJ=$(DEVICE), PROP=Event Clock Mode")
  field( PINI, "YES")
  field( VAL,  "$(EvtClkMode-Sel\=0)")
  field( ZRST, "UpStrm FB:same")
  field( ONST, "FracSy")
  field( TWST, "UpStrm FB:FracSy")
  field( THST, "UpStrm FB:stop")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( FLNK, "$(SYS)-$(DEVICE):EvtClkMode-RB")
  info(autosaveFields_pass0, "VAL")
}

record(mbbi, "$(SYS)-$(DEVICE):EvtClkMode-RB") {
  field( DTYP, "Obj Prop uint16")
  field( INP , "@OBJ=$(DEVICE), PROP=Event Clock Mode")
  field( ZRST, "UpStrm FB:same")
  field( ONST, "FracSy")
  field( TWST, "UpStrm FB:FracSy")
  field( THST, "UpStrm FB:stop")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THVL, "3")
}

record(longin, "$(SYS)-$(DEVICE):HwType-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(DEVICE), PROP=Model")
  field(PINI, "YES")
  field(DESC, "Hardware type code")
}

record(longin, "$(SYS)-$(DEVICE):FwVer-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(DEVICE), PROP=Version")
  field(PINI, "YES")
  field(DESC, "Firmware version")
}

record(stringin, "$(SYS)-$(DEVICE):SwVer-I") {
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(DEVICE), PROP=Sw Version")
  field(PINI, "YES")
  field(DESC, "Software version")
}

record(stringin, "$(SYS)-$(DEVICE):Pos-I") {
  field(DTYP, "Obj Prop string")
  field(INP , "@OBJ=$(DEVICE), PROP=Position")
  field(PINI, "YES")
  field(DESC, "Card position in system")
}

record(fanout, "$(SYS)-$(DEVICE):Time-Init-FO_") {
  field(PINI, "YES")
  field(LNK1, "$(SYS)-$(DEVICE):Time-Clock-SP")
  field(LNK2, "$(SYS)-$(DEVICE):Time-Src-Sel")
}

record(bi, "$(SYS)-$(DEVICE):Time-Valid-Sts") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(DEVICE), PROP=Timestamp Valid")
  field(PINI, "YES")
  field(SCAN, "I/O Intr")
  field(ZSV , "MAJOR")
  field(ZNAM, "Invalid")
  field(ONAM, "Valid")
}

record(mbbo, "$(SYS)-$(DEVICE):Time-Src-Sel") {
  field( DTYP, "Raw Soft Channel")
  field( OUT , "$(SYS)-$(DEVICE):Time-Src-Sel_")
  field( PINI, "YES")
  field( VAL , "$(Time-Src-Sel\=0)")
  field( ZRST, "Event clock")
  field( ONST, "Mapped code(s)")
  field( TWST, "DBus 4")
  field( ZRVL, "0")
  field( ONVL, "1")
  field( TWVL, "2")
  field( THSV, "INVALID")
  field( FRSV, "INVALID")
  field( FVSV, "INVALID")
  field( SXSV, "INVALID")
  field( SVSV, "INVALID")
  field( EISV, "INVALID")
  field( NISV, "INVALID")
  field( TESV, "INVALID")
  field( ELSV, "INVALID")
  field( TVSV, "INVALID")
  field( TTSV, "INVALID")
  field( FTSV, "INVALID")
  field( FFSV, "INVALID")
  field( UNSV, "INVALID")
  field( IVOA, "Don't drive outputs")
  field(FLNK, "$(SYS)-$(DEVICE):Time-Src-Sel_")
  info(autosaveFields_pass0, "VAL")
}

record(longout, "$(SYS)-$(DEVICE):Time-Src-Sel_") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(DEVICE), PROP=Timestamp Source")
  field(FLNK, "$(SYS)-$(DEVICE):Time-Clock-I")
}

record(ao, "$(SYS)-$(DEVICE):Time-Clock-SP") {
  field(DTYP, "Obj Prop double")
  field(OUT , "@OBJ=$(DEVICE), PROP=Timestamp Clock")
  field(DESC, "Timestamp tick rate")
  field( VAL , "$(Time-Clock-SP\=0.0)")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "0")
  field(DRVH, "150")
  field(DRVL, "0")
  field(PREC, "3")
  field(FLNK, "$(SYS)-$(DEVICE):Time-Clock-I")
  info(autosaveFields_pass0, "VAL EGU ESLO HOPR LOPR DRVH DRVL PREC")
}

record(ai, "$(SYS)-$(DEVICE):Time-Clock-I") {
  field(DTYP, "Obj Prop double")
  field(INP , "@OBJ=$(DEVICE), PROP=Timestamp Clock")
  field(SCAN, "1 second")
  field(DESC, "Timestamp tick rate")
  field(PINI, "YES")
  field(UDF , "0")
  field(EGU , "MHz")
  field(LINR, "LINEAR")
  field(ESLO, "1e-6")
  field(HOPR, "150")
  field(LOPR, "0")
  field(PREC, "3")
  field(FLNK, "$(SYS)-$(DEVICE):Time-Div-I")
}

record(longin, "$(SYS)-$(DEVICE):Time-Div-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(DEVICE), PROP=Timestamp Prescaler")
  field(DESC, "Timestamp divider")
}

record(stringin, "$(SYS)-$(DEVICE):Time-I") {
  field(DTYP, "EVR Timestamp")
  field(INP , "@OBJ=$(DEVICE)")
  field(SCAN, "Event")
  field(EVNT, "$(EVNT1HZ)")
  field(TSE , "125")
}

## Delay compensation records
record(bo, "$(SYS)-$(DEVICE):DlyCompensation-Enabled-Sel") {
  field(DESC, "Enable/disable delay compensation")
  field(DTYP, "Obj Prop bool")
  field(OUT , "@OBJ=$(DEVICE), PROP=dc enabled")
  field(PINI, "YES")
  field(VAL , "$(DlyCompensation-Enabled-Sel\=1)")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-Enabled-RB")
  info(autosaveFields_pass0, "VAL")
}

record(bi, "$(SYS)-$(DEVICE):DlyCompensation-Enabled-RB") {
  field(DESC, "Enable/disable delay compensation")
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(DEVICE), PROP=dc enabled")
  field(ZNAM, "Disabled")
  field(ONAM, "Enabled")
}

# This record is triggered through CP link and sets 
# target delay compensation value based on the linked record
record(calcout, "$(SYS)-$(DEVICE):DlyCompensation-Source-I") {
  field(INPA, "$(DlyCompensation-Source-I\=SWISSFEL-STATUS:EvrDC-SP CP)")
  field(CALC, "A")
  field(DISV, "1")
  field(DISA, "$(DlyCompensation-Source-Disa\=0)")
  field(OUT , "$(SYS)-$(DEVICE):DlyCompensation-Target-SP PP")
}

record(ao, "$(SYS)-$(DEVICE):DlyCompensation-Target-SP") {
  field(VAL, "5000")
  field(PINI, "YES")
  field(EGU, "ns")
  field(DESC, "Delay compensation target value")
  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw_")
  info(autosaveFields_pass0, "VAL")
}

record(calcout, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw_") {
  field(DESC, "Delay compensation target value")
  field(INPA, "$(SYS)-$(DEVICE):DlyCompensation-Target-SP")
  field(INPB, "$(SYS)-$(DEVICE):Link-Clk-I CP")
  field(EGU, "ns")
  field(PREC, "0")
  field(CALC, "(FLOOR(A*B/1000)<<16)+((A-(FLOOR(A*B/1000)/B*1000))/(1000/(B*65535)))")
  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw-SP")
  field(OUT, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw-SP")
}

record(longout, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw-SP") {
  field(DTYP, "Obj Prop uint32")
  field(OUT , "@OBJ=$(DEVICE), PROP=dc tv")
  field(EGU, "raw")
  field(DESC, "Delay compensation target value")
  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw-RB")
}

record(longin, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(EGU, "raw")
  field(INP , "@OBJ=$(DEVICE), PROP=dc tv")
  field(DESC, "Delay compensation target value")
  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-Target-RB")
}

record(calc, "$(SYS)-$(DEVICE):DlyCompensation-Target-RB") {
  field(DESC, "Delay compensation target value")
  field(INPA, "$(SYS)-$(DEVICE):DlyCompensation-Target-Raw-RB")
  field(INPB, "$(SYS)-$(DEVICE):Link-Clk-I CP")
  field(EGU, "ns")
  field(PREC, "5")
  field(LOLO, "50.0")
  field(LLSV, "MAJOR")
  field(CALC, "((A>>16)/B*1000)+((A & 65535)*(1000/(B*65535)))")
}

record(longin, "$(SYS)-$(DEVICE):DlyCompensation-Path-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(EGU, "raw")
  field(INP , "@OBJ=$(DEVICE), PROP=dc tpd")
  field(DESC, "Delay compens trans path dly")
  field(SCAN, "1 second")
  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-Path-RB")
}

record(calc, "$(SYS)-$(DEVICE):DlyCompensation-Path-RB") {
  field(DESC, "Delay compens trans path dly")
  field(INPA, "$(SYS)-$(DEVICE):DlyCompensation-Path-Raw-RB")
  field(INPB, "$(SYS)-$(DEVICE):Link-Clk-I CP")
  field(EGU, "ns")
  field(PREC, "5")
  field(CALC, "((A>>16)/B*1000)+((A & 65535)*(1000/(B*65535)))")
}

record(longin, "$(SYS)-$(DEVICE):DlyCompensation-Internal-Raw-RB") {
  field(DTYP, "Obj Prop uint32")
  field(EGU, "raw")
  field(INP , "@OBJ=$(DEVICE), PROP=dc id")
  field(DESC, "Delay compensation internal delay")
  field(SCAN, "1 second")
  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-Internal-RB")
}

record(calc, "$(SYS)-$(DEVICE):DlyCompensation-Internal-RB") {
  field(DESC, "Delay compensation internal delay")
  field(INPA, "$(SYS)-$(DEVICE):DlyCompensation-Internal-Raw-RB")
  field(INPB, "$(SYS)-$(DEVICE):Link-Clk-I CP")
  field(EGU, "ns")
  field(PREC, "5")
  field(CALC, "((A>>16)/B*1000)+((A & 65535)*(1000/(B*65535)))")
}

record(calc, "$(SYS)-$(DEVICE):DlyCompensation-PathInt-RB") {
  field(DESC, "Path + internal delay compensation")
  field(INPA, "$(SYS)-$(DEVICE):DlyCompensation-Internal-RB CP")
  field(INPB, "$(SYS)-$(DEVICE):DlyCompensation-Path-RB CP")
  field(EGU,  "ns")
  field(PREC, "5")
  field(CALC, "A+B")
}

record(bi, "$(SYS)-$(DEVICE):DlyCompensation-Status-RB") {
  field(DTYP, "Obj Prop bool")
  field(INP , "@OBJ=$(DEVICE), PROP=dc locked")
  field(DESC, "Delay compensation status")
  field(SCAN, "5 second")
  field(ZNAM, "Unlocked")
  field(ONAM, "Locked to set value")
  field(ZSV , "MAJOR")

  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-PDV-RB")
}

record(mbbi, "$(SYS)-$(DEVICE):DlyCompensation-PDV-RB") {
  field(DTYP, "Obj Prop uint16")
  field(INP , "@OBJ=$(DEVICE), PROP=dc path delay valid")
  field(DESC, "Path delay status")

  field(ZRST, "Not valid")
  field(ONST, "Valid: coarse acquisition")
  field(TWST, "Valid: fine acquisition")

  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "3")

  field(UNSV, "INVALID")
  field(ZRSV, "MAJOR")

  field(FLNK, "$(SYS)-$(DEVICE):DlyCompensation-DVS-RB")
}


record(mbbi, "$(SYS)-$(DEVICE):DlyCompensation-DVS-RB") {
  field(DTYP, "Obj Prop uint16")
  field(INP , "@OBJ=$(DEVICE), PROP=dc delay setting status")
  field(DESC, "Delay value status")

  field(ZRST, "Valid")
  field(ONST, "Target too small")
  field(TWST, "Target too big")

  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")

  field(UNSV, "INVALID")
  field(ONSV, "MAJOR")
  field(TWSV, "MAJOR")
}

# DBus status
record(mbbiDirect, "$(SYS)-$(DEVICE):DBus-Status-I") {
  field(DTYP, "Obj Prop uint16")
  field(INP , "@OBJ=$(DEVICE), PROP=DBus status")
  field(PINI, "YES")
  field(DESC, "DBus bits value")
  field(SCAN, ".1 second")
}

record(longin, "$(SYS)-$(DEVICE):TopologyID-I") {
  field(DTYP, "Obj Prop uint32")
  field(INP , "@OBJ=$(DEVICE), PROP=Topology ID")
  field(DESC, "Node topology ID")
  field(SCAN, "10 second")
}
